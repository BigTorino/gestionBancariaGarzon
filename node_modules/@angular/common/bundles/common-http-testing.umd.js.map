{"version":3,"file":"common-http-testing.umd.js","sources":["../../../../../packages/common/http/testing/src/api.ts","../../../../../packages/common/http/testing/src/request.ts","../../../../../packages/common/http/testing/src/backend.ts","../../../../../packages/common/http/testing/src/module.ts","../../../../../packages/common/http/testing/public_api.ts","../../../../../packages/common/http/testing/index.ts","../../../../../packages/common/http/testing/testing.ts"],"names":["HttpHeaders","HttpResponse","HttpErrorResponse","Observable","HttpEventType","Injectable","NgModule","HttpClientModule","HttpBackend"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @publicApi\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpErrorResponse, HttpEvent, HttpHeaders, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {Observer} from 'rxjs';\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nexport class TestRequest {\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled(): boolean {\n    return this._cancelled;\n  }\n\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n\n  constructor(public request: HttpRequest<any>, private observer: Observer<HttpEvent<any>>) {}\n\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(\n      body: ArrayBuffer|Blob|boolean|string|number|Object|(boolean|string|number|Object|null)[]|\n      null,\n      opts: {\n        headers?: HttpHeaders|{[name: string]: string | string[]},\n        status?: number,\n        statusText?: string,\n      } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText: string|undefined = opts.statusText;\n    let status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n\n  /**\n   * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n   */\n  error(error: ErrorEvent, opts: {\n    headers?: HttpHeaders|{[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body: ArrayBuffer|Blob|string|number|Object|\n                            (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body: ArrayBuffer|Blob|string|number|Object|\n                 (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(\n    body: ArrayBuffer|Blob|boolean|string|number|Object|\n    (boolean | string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body: ArrayBuffer|Blob|string|number|Object|\n                     (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(\n    responseType: string,\n    body: ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|\n    null): ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|null {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n@Injectable()\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n  /**\n   * List of pending requests which have not yet been expected.\n   */\n  private open: TestRequest[] = [];\n\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent} as HttpEvent<any>);\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n  private _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const results = this._match(match);\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n  expectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found ${\n          matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open\n                             .map(testReq => {\n                               const url = testReq.request.urlWithParams;\n                               const method = testReq.request.method;\n                               return `${method} ${url}`;\n                             })\n                             .join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n      throw new Error(message);\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n  expectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${\n          matches.length}.`);\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding requests.\n   */\n  verify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(testReq => {\n                             const url = testReq.request.urlWithParams.split('?')[0];\n                             const method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n\n  private descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n  ],\n})\nexport class HttpClientTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {HttpTestingController, RequestMatch} from './src/api';\nexport {HttpClientTestingModule} from './src/module';\nexport {TestRequest} from './src/request';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {HttpClientTestingBackend as ɵangular_packages_common_http_testing_testing_a} from './src/backend';"]}